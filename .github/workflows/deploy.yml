
name: EKS Full Setup

# on:
#   push:
#     branches: [main]

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '수동 배포'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - argo
          - infra


jobs:
  setup-infra:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'all' }}
    outputs:
      vpc_id: ${{ steps.get-vpc.outputs.vpc_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Install eksctl
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
      - name: Install helm
        run: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Set up kubeconfig
        run: aws eks update-kubeconfig --region ap-northeast-2 --name one-cluster

      - name: Get VPC ID from EKS Cluster
        id: get-vpc
        run: |
          VPC_ID=$(aws eks describe-cluster \
            --name one-cluster \
            --region ap-northeast-2 \
            --query "cluster.resourcesVpcConfig.vpcId" \
            --output text)
          echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
      - name: Associate OIDC provider
        run: |
          eksctl utils associate-iam-oidc-provider \
            --region ap-northeast-2 \
            --cluster one-cluster \
            --approve
      - name: Create IAM service account
        run: |
          eksctl create iamserviceaccount \
            --cluster one-cluster \
            --namespace kube-system \
            --name aws-load-balancer-controller \
            --attach-policy-arn arn:aws:iam::777205220558:policy/AWSLoadBalancerControllerIAMPolicy \
            --override-existing-serviceaccounts \
            --region ap-northeast-2 \
            --approve
      - name: Install ALB Controller
        run: |
          helm repo add eks https://aws.github.io/eks-charts
          helm repo update
          helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
            -n kube-system \
            --set clusterName=one-cluster \
            --set serviceAccount.create=false \
            --set serviceAccount.name=aws-load-balancer-controller \
            --set vpcId=${{ steps.get-vpc.outputs.vpc_id }}
      - name: Label Nodes
        run: |
          NODES=($(kubectl get nodes -o jsonpath='{.items[*].metadata.name}'))
          kubectl label nodes ${NODES[0]} dspESType=master dspSparkType=master --overwrite
          kubectl label nodes ${NODES[1]} dspESType=data1 dspSparkType=worker --overwrite
          kubectl label nodes ${NODES[2]} dspESType=data2 dspSparkType=worker dspDBType=postgre --overwrite
  setup-argocd:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'argo' }}
    # needs: setup-infra
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Install eksctl & helm
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
          sudo mv /tmp/eksctl /usr/local/bin
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - name: Set up kubeconfig
        run: aws eks update-kubeconfig --region ap-northeast-2 --name one-cluster

      # - name: Create argocd-values.yaml from secret
      #   run: echo "${{ secrets.ARGO_VALUES }}" | base64 -d > argocd-values.yaml

      - name: Install Argo CD with Helm
        run: |
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install argocd argo/argo-cd \
            -n argocd \
            -f argo\argocd-values.yaml
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-image-updater/stable/manifests/install.yaml
          
      - name: Apply Argo CD Settings (Git repo, Application, Secrets 등)
        run: |
          echo "${{ secrets.ARGO_GIT_REPO }}" > git-repo.yaml
          kubectl apply -f ./git-repo.yaml
          kubectl apply -f ./argo/install/
  setup-grafana:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.environment == 'infra' }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-northeast-2 --name one-cluster
      
      - name: Install grafana CD with Helm
        run: |
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo update
          helm upgrade --install grafana grafana/grafana \
            --namespace monitoring \
            --create-namespace \
            --values ./grafana/values.yaml
  setup-prometheus:
    runs-on: ubuntu-latest
    needs: setup-grafana
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-northeast-2 --name one-cluster
      
      - name: Install prometheus with Helm
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade --install prometheus prometheus-community/prometheus \
            --namespace monitoring \
            --create-namespace \
            -f ./prometheus/values.yaml

      - name: Install prometalertmanagerheus with Helm
        run: |
          helm upgrade --install alertmanager prometheus-community/alertmanager \
            -n monitoring \
            -f ./prometheus/alert_values.yaml
  setup-fluentbit :
    runs-on: ubuntu-latest
    needs: setup-prometheus
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: Setup kubeconfig
        run: |
          aws eks update-kubeconfig --region ap-northeast-2 --name one-cluster
        
      - name: Install fluentbit with Helm
        run: |
          helm repo add fluent https://fluent.github.io/helm-charts
          helm repo update
          helm upgrade --install fluent-bit fluent/fluent-bit \
            --namespace logging \
            --create-namespace \
            -f ./fluentbit/values.yaml